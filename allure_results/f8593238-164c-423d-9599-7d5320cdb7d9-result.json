{"name": "Проверка перехода в личный кабинет в шапке профиля", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=128.0.6613.85)\nStacktrace:\n\tGetHandleVerifier [0x0100D933+25811]\n\t(No symbol) [0x00F9E314]\n\t(No symbol) [0x00E92523]\n\t(No symbol) [0x00E6E27B]\n\t(No symbol) [0x00F019BF]\n\t(No symbol) [0x00F14029]\n\t(No symbol) [0x00EFAAC6]\n\t(No symbol) [0x00ECBEFD]\n\t(No symbol) [0x00ECC8FD]\n\tGetHandleVerifier [0x012DF143+2981091]\n\tGetHandleVerifier [0x01332FF9+3324825]\n\tGetHandleVerifier [0x0109B32F+605903]\n\tGetHandleVerifier [0x010A2CBC+637020]\n\t(No symbol) [0x00FA6F4D]\n\t(No symbol) [0x00FA3DD8]\n\t(No symbol) [0x00FA3F75]\n\t(No symbol) [0x00F96406]\n\tBaseThreadInitThunk [0x77247BA9+25]\n\tRtlInitializeExceptionChain [0x77D0C0CB+107]\n\tRtlClearBits [0x77D0C04F+191]", "trace": "self = <test_personal.TestPersonalAccount object at 0x000001DBD23E7170>, driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"eac03430ccc516dff7df4de97f8ffcd7\")>\n\n    @allure.title('Проверка перехода в личный кабинет в шапке профиля')\n    @allure.description('Тест проверяет, что можно успешно перейти в личный кабинет, нажав на соответствующую кнопку в шапке профиля')\n    def test_click_to_personal_account(self, driver):\n        personal_page = PersonalPage(driver)\n>       personal_page.click_to_button_from_up()\n\ntests\\test_personal.py:9: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\personal_page.py:15: in click_to_button_from_up\n    self.click_element(PersonalLocators.PERSONAL_ACCOUNT_BUTTON)\npages\\base_page.py:24: in click_element\n    element = self.find_element(locator, timeout)\npages\\base_page.py:18: in find_element\n    return WebDriverWait(self.driver, timeout).until(EC.presence_of_element_located(locator))\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:84: in _predicate\n    return driver.find_element(*locator)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001DBD28B1910>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...dInitThunk [0x77247BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x77D0C0CB+107]\\\\n\\\\tRtlClearBits [0x77D0C04F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=128.0.6613.85)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0100D933+25811]\nE       \t(No symbol) [0x00F9E314]\nE       \t(No symbol) [0x00E92523]\nE       \t(No symbol) [0x00E6E27B]\nE       \t(No symbol) [0x00F019BF]\nE       \t(No symbol) [0x00F14029]\nE       \t(No symbol) [0x00EFAAC6]\nE       \t(No symbol) [0x00ECBEFD]\nE       \t(No symbol) [0x00ECC8FD]\nE       \tGetHandleVerifier [0x012DF143+2981091]\nE       \tGetHandleVerifier [0x01332FF9+3324825]\nE       \tGetHandleVerifier [0x0109B32F+605903]\nE       \tGetHandleVerifier [0x010A2CBC+637020]\nE       \t(No symbol) [0x00FA6F4D]\nE       \t(No symbol) [0x00FA3DD8]\nE       \t(No symbol) [0x00FA3F75]\nE       \t(No symbol) [0x00F96406]\nE       \tBaseThreadInitThunk [0x77247BA9+25]\nE       \tRtlInitializeExceptionChain [0x77D0C0CB+107]\nE       \tRtlClearBits [0x77D0C04F+191]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "description": "Тест проверяет, что можно успешно перейти в личный кабинет, нажав на соответствующую кнопку в шапке профиля", "steps": [{"name": "Инициализация драйвера", "status": "passed", "parameters": [{"name": "driver", "value": "<selenium.webdriver.chrome.webdriver.WebDriver (session=\"eac03430ccc516dff7df4de97f8ffcd7\")>"}], "start": 1730058886880, "stop": 1730058886880}, {"name": "Нажимаем на кнопку \"Личный кабинет\" в шапке", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=128.0.6613.85)\nStacktrace:\n\tGetHandleVerifier [0x0100D933+25811]\n\t(No symbol) [0x00F9E314]\n\t(No symbol) [0x00E92523]\n\t(No symbol) [0x00E6E27B]\n\t(No symbol) [0x00F019BF]\n\t(No symbol) [0x00F14029]\n\t(No symbol) [0x00EFAAC6]\n\t(No symbol) [0x00ECBEFD]\n\t(No symbol) [0x00ECC8FD]\n\tGetHandleVerifier [0x012DF143+2981091]\n\tGetHandleVerifier [0x01332FF9+3324825]\n\tGetHandleVerifier [0x0109B32F+605903]\n\tGetHandleVerifier [0x010A2CBC+637020]\n\t(No symbol) [0x00FA6F4D]\n\t(No symbol) [0x00FA3DD8]\n\t(No symbol) [0x00FA3F75]\n\t(No symbol) [0x00F96406]\n\tBaseThreadInitThunk [0x77247BA9+25]\n\tRtlInitializeExceptionChain [0x77D0C0CB+107]\n\tRtlClearBits [0x77D0C04F+191]\n\n", "trace": "  File \"C:\\Users\\evgen\\PycharmProjects\\Diplom_3\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\evgen\\PycharmProjects\\Diplom_3\\pages\\personal_page.py\", line 15, in click_to_button_from_up\n    self.click_element(PersonalLocators.PERSONAL_ACCOUNT_BUTTON)\n  File \"C:\\Users\\evgen\\PycharmProjects\\Diplom_3\\pages\\base_page.py\", line 24, in click_element\n    element = self.find_element(locator, timeout)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\evgen\\PycharmProjects\\Diplom_3\\pages\\base_page.py\", line 18, in find_element\n    return WebDriverWait(self.driver, timeout).until(EC.presence_of_element_located(locator))\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\evgen\\PycharmProjects\\Diplom_3\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 96, in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\evgen\\PycharmProjects\\Diplom_3\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 84, in _predicate\n    return driver.find_element(*locator)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\evgen\\PycharmProjects\\Diplom_3\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 748, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\evgen\\PycharmProjects\\Diplom_3\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 354, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\evgen\\PycharmProjects\\Diplom_3\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1730058886880, "stop": 1730058889428}], "parameters": [{"name": "driver", "value": "'chrome'"}], "start": 1730058886880, "stop": 1730058889428, "uuid": "695338db-c024-4eed-82cb-e2bd93e50616", "historyId": "9c31672f58fba8565ee0f7d8b6413f82", "testCaseId": "461d0e6ade05dc6a14a4444fa457e953", "fullName": "tests.test_personal.TestPersonalAccount#test_click_to_personal_account", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_personal"}, {"name": "subSuite", "value": "TestPersonalAccount"}, {"name": "host", "value": "DESKTOP-PJL0EHE"}, {"name": "thread", "value": "24388-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_personal"}]}